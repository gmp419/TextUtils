{"version":3,"sources":["logo.svg","components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","title","type","id","home","onClick","enableDarkMode","htmlFor","placeholder","TextForm","useState","text","myText","style","color","heading","value","onChange","event","target","backgroundColor","rows","console","log","upperText","toUpperCase","showAlert","toLowerCase","newText","split","join","border","length","defaultProps","about","Alert","alert","typ","role","word","lower","charAt","slice","capitalize","msg","App","setMode","setAlert","message","setTimeout","document","body","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.cafe3ad6.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { Link } from 'react-router-dom';\n\n\nexport default function Navbar(props){\n    return(\n        <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\n        <div className=\"container-fluid\">\n          {/* <Link className=\"navbar-brand\" to=\"/\">\n            {props.title}\n          </Link> */}\n          <a className=\"navbar-brand\" href=\"#\">\n            {props.title}\n          </a>\n          <button\n            className=\"navbar-toggler\"\n            type=\"button\"\n            data-bs-toggle=\"collapse\"\n            data-bs-target=\"#navbarSupportedContent\"\n            aria-controls=\"navbarSupportedContent\"\n            aria-expanded=\"false\"\n            aria-label=\"Toggle navigation\"\n          >\n            <span className=\"navbar-toggler-icon\"></span>\n          </button>\n          <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n            <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\n              <li className=\"nav-item\">\n                {/* <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">\n                  {props.home} \n                </Link> */}\n                <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">\n                  {props.home} \n                </a>\n              </li>\n              <li className=\"nav-item\">\n                {/* <Link className=\"nav-link\" to=\"/about\">\n                  {props.about}\n                </Link> */}\n              </li>\n            </ul>\n            <div className={`form-check form-switch text-${props.mode === 'light'?'dark':'light'} pr-4`} >\n                <input className=\"form-check-input\" onClick={props.enableDarkMode} type=\"checkbox\" id=\"flexSwitchCheckDefault\"/>\n                <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Dark Mode..</label>\n            </div>\n            <form className=\"d-flex\">\n              <input\n                className=\"form-control me-2\"\n                type=\"search\"\n                placeholder=\"Search\"\n                aria-label=\"Search\"\n              />\n              <button className=\"btn btn-outline-success\" type=\"submit\">\n                Search\n              </button>\n              \n            </form>\n          </div>\n        </div>\n      </nav>\n\n    )\n}\n\nNavbar.propTypes = {\n    title: PropTypes.string,\n    about: PropTypes.string,\n    props: PropTypes.string\n}\n\nNavbar.defaultProps = {\n    title: 'your title',\n    about: 'your about'\n}","import React, {useState} from 'react'\n\nexport default function TextForm(props){\n    const handleUpperCaseClick = () => {\n        console.log(\"click the button\");\n        let upperText = text.toUpperCase();\n        myText(upperText);\n        props.showAlert(\"Converted to upper case\",\"success\")\n    }\n    const handleLowerCaseClick = () => {\n        console.log(\"click the button\");\n        let upperText = text.toLowerCase();\n        myText(upperText)\n        props.showAlert(\"Converted to lower case\",\"danger\")\n    }\n\n    const handleOnChange = (event)=>{\n        myText(event.target.value)\n    }\n\n    const clearText = ()=>{\n        let deleteText = '';\n        myText(deleteText)\n    }\n\n    const rmExtraSpace= ()=>{\n        let newText = text.split(/[ ]+/);\n        myText(newText.join(\" \"))\n    }\n    \n\n    const [text, myText] = useState('Please, this is state.');\n    // text = \"new text\"  wrong way to updare state\n    // myText(\"new text\") correct way to update state\n    return(\n        <>\n        <div className=\"m-4 container\" style={{color:props.mode ==='dark'?'#fff':'black'}}>\n    \n            <div className=\"mb-3\">\n                <label htmlFor=\"myBox\" className=\"form-label\">\n                <h1>{props.heading}</h1>\n\n                </label>\n                <textarea className=\"form-control\" id=\"myBox\" value={text} onChange={handleOnChange} style={{backgroundColor:props.mode ==='dark'?'grey':'white',color:props.mode ==='dark'?'#fff':'black'}} rows=\"8\"></textarea>\n            </div>   \n            <button className=\"btn btn-primary mx-2\" onClick={handleUpperCaseClick}>Convert to Upper Case</button>\n            <button className=\"btn btn-info mx-2\" onClick={handleLowerCaseClick}>Convert to Lower Case</button>\n            <button className=\"btn btn-success mx-2\" onClick={clearText}>Delete All Text</button>\n            <button className=\"btn btn-primary\" onClick={rmExtraSpace} type=\"button\" >Remove Extra Space</button>\n\n            \n        </div>\n        <div className=\"m-4 container \" style={{color:props.mode ==='dark'?'#fff':'black', backgroundColor:props.mode ==='dark'?'grey':'white',border:'1px solid #fff'}}>\n            <h2>Text summary</h2>\n            <p>{text.split(\" \").length} words, {text.length} characters</p>\n            <p>{0.008 * text.split(\" \").length} Minutes to read</p>\n            <h2>Preview</h2>\n            <p>{text.length > 0?text:\"please enter the text here\"}</p>\n        </div>\n        </>\n    );\n}","import React from \"react\";\n\nfunction Alert(props) {\n\n  const capitalize = (word)=>{\n    const lower = word.toLowerCase();\n    return lower.charAt(0).toUpperCase() + lower.slice(1);\n  }\n  return (\n    props.alert&& <div\n      className={`alert alert-${props.alert.typ} alert-dismissible fade show`}\n      role=\"alert\"\n    >\n      <strong>\n          {capitalize(props.alert.typ)}\n      </strong> : {props.alert.msg}\n    </div>\n  );\n}\n\nexport default Alert;\n","import logo from \"./logo.svg\";\nimport \"./App.css\";\nimport Navbar from \"./components/Navbar\";\nimport TextForm from \"./components/TextForm\";\n// import About from \"./components/About\";\nimport React, { useState } from \"react\";\nimport Alert from \"./components/Alert\";\n// import { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\n\nlet name = \"Gaurang\";\nfunction App() {\n  const [mode, setMode] = useState(\"light\");\n  const [alert, setAlert] = useState(null);\n\n  const showAlert = (message, type) => {\n    setAlert({\n      msg: message,\n      typ: type,\n    });\n    setTimeout(() => {\n      setAlert(null);\n    }, 3000);\n  };\n\n  const toggleMode = () => {\n    if (mode === \"light\") {\n      setMode(\"dark\");\n      document.body.style.backgroundColor = \"#003366\";\n      showAlert(\"Dark mode has been enabled\", \"success\");\n      document.title = \"TextUtils - Dark Mode\";\n    } else {\n      setMode(\"light\");\n      document.body.style.backgroundColor = \"#ffffff\";\n      showAlert(\"light mode has been enabled\", \"success\");\n      document.title = \"TextUtils - Dark Mode\";\n    }\n  };\n\n  return (\n    <>\n      {/* <Router> */}\n        <Navbar\n          title=\"Gaurang\"\n          home=\"My Home\"\n          about=\"About\"\n          mode={mode}\n          enableDarkMode={toggleMode}\n        />\n        <Alert alert={alert} />\n        <div className=\"container\">\n          {/* <Switch>\n            <Route exact path=\"/about\">\n              <About />\n            </Route>\n            <Route exact path=\"/\"> */}\n              <TextForm\n                heading=\"My Textutility\"\n                mode={mode}\n                showAlert={showAlert}\n              />\n            {/* </Route>\n          </Switch> */}\n        </div>\n      {/* </Router> */}\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}